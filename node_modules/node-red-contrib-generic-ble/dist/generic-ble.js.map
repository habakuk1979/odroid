{"version":3,"sources":["generic-ble.js"],"names":["_noble","_interopRequireDefault","require","_debug","emit","default","debugIn","debugOut","debugCfg","Promise","reject","readObj","process","topic","RED","httpAdmin","configBleDevices","apiObject","toApiObject","peripheral","noble","getAddressOrUUID","address","uuid","stopBLEScanning","genericBleState","scanning","log","info","stopScanning","startBLEScanning","handlers","onDiscover","addressOrUUID","connectable","debug","advertisement","localName","nodes","eachNode","node","type","getNode","id","discovered","onDiscoverFunc","onMiss","missed","onMissFunc","onStateChange","state","startScanning","onStateChangeFunc","onError","err","message","stack","error","initialized","Object","values","forEach","onErrorFunc","removeListener","addListener","async","rssi","module","exports","toCharacteristic","c","self","name","_","notifiable","properties","indexOf","readable","writable","writeWithoutResponse","object","addDataListener","func","dataListener","removeAllListeners","on","unsubscribe","resolve","_peripherals","_peripheralId","registerType","constructor","n","createNode","this","characteristics","key","ev","keys","e","done","k","shutdown","then","catch","nextTick","[object Object]","_disconnectedHandlerSet","once","_connectHandlerSet","discoverAllServicesAndCharacteristics","services","reduce","prev","curr","concat","map","connect","disconnect","all","register","remove","dataObj","Error","connectPeripheral","writables","filter","JSON","stringify","length","uuidList","w","buf","hexOrIntArray","len","Buffer","isBuffer","rawHex","parseInt","toString","Array","join","from","isArray","i","splice","alloc","valToBuffer","write","uuids","split","trim","readables","notifiables","r","read","data","period","isNotification","notification","subscribe","setTimeout","useString","genericBleNodeId","genericBle","genericBleNode","onBleNotify","bind","status","fill","shape","text","msg","send","obj","payload","parse","disconnectPeripheral","notify","warn","apply","arguments","events","debugApi","get","auth","needsPermission","req","res","method","originalUrl","end","post","sw","params","body","json","_headerSent","bleDevice","discoveryInterrupted","resolved","characteristic","deviceNameCharacteristic","s","toDetailedObject"],"mappings":"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","file":"generic-ble.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 CANDY LINE INC.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport noble from './noble';\nimport debugLogger from 'debug';\n\nconst debug = debugLogger('node-red-contrib-generic-ble:index');\nconst debugIn = debugLogger(\n  'node-red-contrib-generic-ble:index:generic-ble-in'\n);\nconst debugOut = debugLogger(\n  'node-red-contrib-generic-ble:index:generic-ble-out'\n);\nconst debugCfg = debugLogger('node-red-contrib-generic-ble:index:generic-ble');\nconst debugApi = debugLogger('node-red-contrib-generic-ble:index:api');\n\n// Workaround for a Jest Issue\n// https://github.com/kulshekhar/ts-jest/issues/727#issuecomment-422747294\nif (process.env.NODE_ENV !== 'test') {\n  debug('Requiring \"source-map-support/register\"...');\n  require('source-map-support/register');\n}\nconst configBleDevices = {};\nconst genericBleState = {\n  scanning: false,\n};\nconst handlers = {\n  // global event handlers\n};\n\nfunction getAddressOrUUID(peripheral) {\n  if (!peripheral) {\n    return null;\n  }\n  if (!peripheral.address || peripheral.address === 'unknown') {\n    return peripheral.uuid;\n  }\n  return peripheral.address;\n}\n\nfunction valToBuffer(hexOrIntArray, len = 1) {\n  if (Buffer.isBuffer(hexOrIntArray)) {\n    return hexOrIntArray;\n  }\n  if (typeof hexOrIntArray === 'number') {\n    let rawHex = parseInt(hexOrIntArray).toString(16);\n    if (rawHex.length < len * 2) {\n      rawHex = Array(len * 2 - rawHex.length + 1).join('0') + rawHex;\n    }\n    if (rawHex.length % 2 === 1) {\n      rawHex = '0' + rawHex;\n    }\n    return Buffer.from(rawHex, 'hex');\n  }\n  if (typeof hexOrIntArray === 'string') {\n    if (hexOrIntArray.length < len * 2) {\n      hexOrIntArray =\n        Array(len * 2 - hexOrIntArray.length + 1).join('0') + hexOrIntArray;\n    }\n    if (hexOrIntArray.length % 2 === 1) {\n      hexOrIntArray = '0' + hexOrIntArray;\n    }\n    return Buffer.from(hexOrIntArray, 'hex');\n  }\n  if (Array.isArray(hexOrIntArray)) {\n    for (let i = 0; i < len - hexOrIntArray.length; i++) {\n      hexOrIntArray.splice(0, 0, 0);\n    }\n    return Buffer.from(hexOrIntArray);\n  }\n  return Buffer.alloc(0);\n}\n\nfunction onDiscoverFunc(RED) {\n  return (peripheral) => {\n    const addressOrUUID = getAddressOrUUID(peripheral);\n    if (!addressOrUUID) {\n      return;\n    } else if (peripheral.connectable) {\n      debug(\n        `[GenericBLE:DISCOVER] <${addressOrUUID}> ${peripheral.advertisement.localName}`\n      );\n      RED.nodes.eachNode((node) => {\n        if (node.type === 'Generic BLE' && peripheral.uuid === node.uuid) {\n          RED.nodes.getNode(node.id).discovered();\n        }\n      });\n    }\n  };\n}\n\nfunction onMissFunc(RED) {\n  return (peripheral) => {\n    const addressOrUUID = getAddressOrUUID(peripheral);\n    debug(\n      `[GenericBLE:MISS] <${addressOrUUID}> ${peripheral.advertisement.localName}`\n    );\n    RED.nodes.eachNode((node) => {\n      if (node.type === 'Generic BLE' && node.uuid === peripheral.uuid) {\n        RED.nodes.getNode(node.id).missed();\n      }\n    });\n  };\n}\n\nfunction onStateChangeFunc(RED) {\n  return (state) => {\n    if (state === 'poweredOn') {\n      if (!genericBleState.scanning) {\n        RED.log.info(`[GenericBLE] Start BLE scanning`);\n        noble.startScanning([], true);\n        genericBleState.scanning = true;\n      }\n    } else if (genericBleState.scanning) {\n      RED.log.info(`[GenericBLE] Stop BLE scanning`);\n      noble.stopScanning();\n      genericBleState.scanning = false;\n    }\n  };\n}\n\nfunction onErrorFunc(RED) {\n  return (err) => {\n    const message = `[GenericBLE:ERROR] ${err.message}, ${err.stack}`;\n    debug(message);\n    RED.log.error(message);\n    if (!noble.initialized) {\n      RED.log.error(\n        `The error seems to be a BlueZ Permission Error. See 'Installation Note' in README at https://flows.nodered.org/node/node-red-contrib-generic-ble for addressing the issue.`\n      );\n    }\n    Object.values(configBleDevices).forEach((node) => node.emit('error'));\n  };\n}\n\nfunction stopBLEScanning(RED) {\n  if (!genericBleState.scanning) {\n    return;\n  }\n  RED.log.info(`[GenericBLE] Stop BLE scanning`);\n  noble.stopScanning();\n  genericBleState.scanning = false;\n}\n\nfunction startBLEScanning(RED) {\n  if (genericBleState.scanning) {\n    return;\n  }\n  if (!handlers.onDiscover) {\n    handlers.onDiscover = onDiscoverFunc(RED);\n  }\n  if (!handlers.onMiss) {\n    handlers.onMiss = onMissFunc(RED);\n  }\n  if (!handlers.onStateChange) {\n    handlers.onStateChange = onStateChangeFunc(RED);\n  }\n  if (!handlers.onError) {\n    handlers.onError = onErrorFunc(RED);\n  }\n\n  noble.removeListener('discover', handlers.onDiscover);\n  noble.removeListener('miss', handlers.onMiss);\n  noble.removeListener('stateChange', handlers.onStateChange);\n  noble.removeListener('error', handlers.onError);\n\n  noble.addListener('discover', handlers.onDiscover);\n  noble.addListener('miss', handlers.onMiss);\n  noble.addListener('stateChange', handlers.onStateChange);\n  noble.addListener('error', handlers.onError);\n\n  if (noble.state === 'poweredOn') {\n    RED.log.info(`[GenericBLE] Start BLE scanning`);\n    noble.startScanning([], true);\n    genericBleState.scanning = true;\n  } else {\n    debug(`noble.state=>${noble.state}`);\n  }\n}\n\nasync function toApiObject(peripheral) {\n  if (!peripheral) {\n    return null;\n  }\n  return {\n    localName: peripheral.advertisement.localName,\n    address: peripheral.address === 'unknown' ? '' : peripheral.address,\n    uuid: peripheral.uuid,\n    rssi: peripheral.rssi,\n  };\n}\n\nasync function toDetailedObject(peripheral, RED) {\n  const obj = await toApiObject(peripheral);\n  switch (peripheral.state) {\n    case 'disconnected': {\n      await new Promise((resolve, reject) => {\n        peripheral.once('connect', (err) => {\n          if (err) {\n            return reject(err);\n          }\n          const discoveryInterrupted = () => {\n            return reject(new Error(`Missing Peripheral Device`));\n          };\n          peripheral.once('disconnect', discoveryInterrupted);\n          peripheral.discoverAllServicesAndCharacteristics((err, services) => {\n            debug(\n              `<toDetailedObject${peripheral.uuid}:discoverAllServicesAndCharacteristics> Callback OK!`\n            );\n            peripheral.removeListener('disconnect', discoveryInterrupted);\n            if (err) {\n              return reject(err);\n            }\n            let resolved = false;\n            obj.characteristics = services\n              .reduce((prev, curr) => {\n                return prev.concat(curr.characteristics);\n              }, [])\n              .map((c) => {\n                const characteristic = {\n                  uuid: c.uuid,\n                  name: c.name || RED._('generic-ble.label.unnamedChr'),\n                  type: c.type || RED._('generic-ble.label.customType'),\n                  notifiable: c.properties.indexOf('notify') >= 0,\n                  readable: c.properties.indexOf('read') >= 0,\n                  writable: c.properties.indexOf('write') >= 0,\n                  writeWithoutResponse:\n                    c.properties.indexOf('writeWithoutResponse') >= 0,\n                };\n                if (\n                  peripheral.state === 'connected' &&\n                  c.type === 'org.bluetooth.characteristic.gap.device_name'\n                ) {\n                  resolved = true;\n                  c.read((err, data) => {\n                    if (err) {\n                      return resolve();\n                    }\n                    obj.localName = data.toString();\n                    peripheral.advertisement.localName = obj.localName;\n                    return resolve();\n                  });\n                }\n                return characteristic;\n              });\n            if (!resolved) {\n              return resolve();\n            }\n          });\n        });\n        peripheral.connect(); // peripheral.state => connecting\n      });\n      break;\n    }\n    case 'connected': {\n      obj.characteristics = [];\n      let deviceNameCharacteristic;\n      peripheral.services.map((s) => {\n        obj.characteristics = obj.characteristics.concat(\n          (s.characteristics || []).map((c) => {\n            if (c.type === 'org.bluetooth.characteristic.gap.device_name') {\n              deviceNameCharacteristic = c;\n            }\n            return {\n              uuid: c.uuid,\n              name: c.name || RED._('generic-ble.label.unnamedChr'),\n              type: c.type || RED._('generic-ble.label.customType'),\n              notifiable: c.properties.indexOf('notify') >= 0,\n              readable: c.properties.indexOf('read') >= 0,\n              writable: c.properties.indexOf('write') >= 0,\n              writeWithoutResponse:\n                c.properties.indexOf('writeWithoutResponse') >= 0,\n            };\n          })\n        );\n      });\n      if (\n        deviceNameCharacteristic &&\n        !peripheral.advertisement.localName &&\n        peripheral.state === 'connected'\n      ) {\n        await new Promise((resolve) => {\n          deviceNameCharacteristic.read((err, data) => {\n            if (err) {\n              return resolve();\n            }\n            obj.localName = data.toString();\n            peripheral.advertisement.localName = obj.localName;\n            return resolve();\n          });\n        });\n      }\n      break;\n    }\n    case 'disconnecting':\n    case 'connecting': {\n      return;\n    }\n    default: {\n      return;\n    }\n  }\n  return obj;\n}\n\nmodule.exports = function (RED) {\n  function toCharacteristic(c) {\n    const self = {\n      uuid: c.uuid,\n      name: c.name || RED._('generic-ble.label.unnamedChr'),\n      type: c.type || RED._('generic-ble.label.customType'),\n      notifiable: c.properties.indexOf('notify') >= 0,\n      readable: c.properties.indexOf('read') >= 0,\n      writable: c.properties.indexOf('write') >= 0,\n      writeWithoutResponse: c.properties.indexOf('writeWithoutResponse') >= 0,\n      object: c,\n      addDataListener: (func) => {\n        if (self.dataListener) {\n          return false;\n        }\n        self.dataListener = func;\n        self.object.removeAllListeners('data');\n        self.object.on('data', func);\n        return true;\n      },\n      unsubscribe: () => {\n        return new Promise((resolve) => {\n          const peripheral = noble._peripherals[self._peripheralId];\n          if (\n            self.notifiable &&\n            peripheral &&\n            peripheral.state === 'connected'\n          ) {\n            delete self.dataListener;\n            self.object.unsubscribe(resolve);\n          } else {\n            return resolve();\n          }\n        });\n      },\n    };\n    return self;\n  }\n\n  class GenericBLENode {\n    constructor(n) {\n      RED.nodes.createNode(this, n);\n      this.localName = n.localName;\n      this.address = n.address;\n      this.uuid = n.uuid;\n      this.characteristics = [];\n      const key = getAddressOrUUID(n);\n      if (key) {\n        configBleDevices[key] = this;\n      }\n      this.nodes = {};\n      [\n        'connected',\n        'disconnected',\n        'error',\n        'connecting',\n        'disconnecting',\n        'missing',\n      ].forEach((ev) => {\n        this.on(ev, () => {\n          try {\n            Object.keys(this.nodes).forEach((id) => {\n              this.nodes[id].emit(ev);\n            });\n          } catch (e) {\n            this.error(e);\n          }\n        });\n      });\n      this.on('close', (done) => {\n        if (genericBleState.scanning) {\n          stopBLEScanning();\n        }\n        Object.keys(configBleDevices).forEach(\n          (k) => delete configBleDevices[k]\n        );\n        this.removeAllListeners('ble-notify');\n        this.shutdown().then(done).catch(done);\n      });\n      process.nextTick(() => {\n        if (noble.initialized) {\n          this.emit('missing');\n        }\n      });\n    }\n    async discovered() {\n      debugCfg(\n        `<discovered:${this.uuid}> noble._peripherals=>${Object.keys(\n          noble._peripherals\n        )}`\n      );\n      const peripheral = noble._peripherals[this.uuid];\n      if (peripheral) {\n        this.emit(peripheral.state || 'disconnected');\n      }\n    }\n    async missed() {\n      debugCfg(`<missed:${this.uuid}>`);\n      this.emit('missing');\n    }\n    async connectPeripheral() {\n      debugCfg(\n        `<connectPeripheral:${this.uuid}> noble._peripherals=>${Object.keys(\n          noble._peripherals\n        )}`\n      );\n      const peripheral = noble._peripherals[this.uuid];\n      if (!peripheral) {\n        this.emit('missing');\n        return;\n      }\n      debug(\n        `<connectPeripheral${this.uuid}> peripheral.state=>${peripheral.state}`\n      );\n      switch (peripheral.state) {\n        case 'disconnected': {\n          this.emit('disconnected');\n          if (!peripheral._disconnectedHandlerSet) {\n            peripheral._disconnectedHandlerSet = true;\n            peripheral.once('disconnect', () => {\n              this.emit('disconnected');\n              peripheral._disconnectedHandlerSet = false;\n            });\n          }\n          if (!peripheral._connectHandlerSet) {\n            peripheral._connectHandlerSet = true;\n            peripheral.once('connect', (err) => {\n              if (err) {\n                this.log(`<connectPeripheral:connect> error:${err.message}`);\n                this.emit('disconnected');\n                return;\n              }\n              this.emit('connected');\n              peripheral._connectHandlerSet = false;\n              peripheral.discoverAllServicesAndCharacteristics(\n                (err, services) => {\n                  debug(\n                    `<connectPeripheral${this.uuid}:discoverAllServicesAndCharacteristics> Callback OK!`\n                  );\n                  if (err) {\n                    this.log(\n                      `<connectPeripheral${this.uuid}:discoverAllServicesAndCharacteristics> error:${err.message}`\n                    );\n                    return;\n                  }\n                  this.characteristics = services\n                    .reduce((prev, curr) => {\n                      return prev.concat(curr.characteristics);\n                    }, [])\n                    .map((c) => toCharacteristic(c));\n                }\n              );\n            });\n            peripheral.connect(); // peripheral.state => connecting\n            this.emit('connecting');\n          }\n          break;\n        }\n        case 'connected': {\n          if (peripheral.services) {\n            this.characteristics = peripheral.services\n              .reduce((prev, curr) => {\n                return prev.concat(curr.characteristics);\n              }, [])\n              .map((c) => toCharacteristic(c));\n          }\n          if (!peripheral._disconnectedHandlerSet) {\n            peripheral._disconnectedHandlerSet = true;\n            peripheral.once('disconnect', () => {\n              this.emit('disconnected');\n              peripheral._disconnectedHandlerSet = false;\n            });\n          }\n          this.emit('connected');\n          break;\n        }\n        case 'disconnecting':\n        case 'connecting': {\n          this.emit(peripheral.state);\n          break;\n        }\n        default: {\n          break;\n        }\n      }\n      return peripheral.state;\n    }\n    async disconnectPeripheral() {\n      debugCfg(\n        `<disconnectPeripheral:${this.uuid}> noble._peripherals=>${Object.keys(\n          noble._peripherals\n        )}`\n      );\n      const peripheral = noble._peripherals[this.uuid];\n      if (!peripheral) {\n        debugCfg(\n          `<disconnectPeripheral:${this.uuid}> peripheral is already gone.`\n        );\n        this.emit('missing');\n        return;\n      }\n      if (peripheral.state === 'disconnected') {\n        debugCfg(\n          `<disconnectPeripheral:${this.uuid}> peripheral is already disconnected.`\n        );\n        this.emit('disconnected');\n        return;\n      }\n      if (!peripheral._disconnectedHandlerSet) {\n        peripheral._disconnectedHandlerSet = true;\n        peripheral.once('disconnect', () => {\n          this.emit('disconnected');\n          peripheral._disconnectedHandlerSet = false;\n        });\n      }\n      peripheral.disconnect();\n      this.emit('disconnecting');\n    }\n    async shutdown() {\n      await Promise.all(this.characteristics.map((c) => c.unsubscribe()));\n    }\n    register(node) {\n      this.nodes[node.id] = node;\n    }\n    remove(node) {\n      delete this.nodes[node.id];\n    }\n    // dataObj = {\n    //   'uuid-to-write-1': Buffer(),\n    //   'uuid-to-write-2': Buffer(),\n    //   :\n    // }\n    async write(dataObj) {\n      if (!dataObj) {\n        throw new Error(`Nothing to write`);\n      }\n      const state = await this.connectPeripheral();\n      if (state !== 'connected') {\n        debugCfg(\n          `[write] Peripheral:${this.uuid} is NOT ready. state=>${state}`\n        );\n        throw new Error(`Not yet connected.`);\n      }\n      let writables = this.characteristics.filter(\n        (c) => c.writable || c.writeWithoutResponse\n      );\n      debugCfg(\n        `characteristics => ${JSON.stringify(\n          this.characteristics.map((c) => {\n            return {\n              uuid: c.uuid,\n              notifiable: c.notifiable,\n              readable: c.readable,\n              writable: c.writable,\n              writeWithoutResponse: c.writeWithoutResponse,\n            };\n          })\n        )}`\n      );\n      debugCfg(`writables.length => ${writables.length}`);\n      if (writables.length === 0) {\n        return;\n      }\n      const uuidList = Object.keys(dataObj);\n      writables = writables.filter((c) => uuidList.indexOf(c.uuid) >= 0);\n      debugCfg(`UUIDs to write => ${uuidList}`);\n      debugCfg(`writables.length => ${writables.length}`);\n      if (writables.length === 0) {\n        return;\n      }\n      // perform write here right now\n      await Promise.all(\n        writables.map((w) => {\n          // {uuid:'characteristic-uuid-to-write', data:Buffer()}\n          return new Promise((resolve, reject) => {\n            const buf = valToBuffer(dataObj[w.uuid]);\n            debugCfg(\n              `<Write> uuid => ${w.uuid}, data => ${buf.toString(\n                'hex'\n              )}, writeWithoutResponse => ${w.writeWithoutResponse}`\n            );\n            w.object.write(buf, w.writeWithoutResponse, (err) => {\n              if (err) {\n                debugCfg(`<Write> ${w.uuid} => FAIL`);\n                return reject(err);\n              }\n              debugCfg(`<Write> ${w.uuid} => OK`);\n              resolve(true);\n            });\n          });\n        })\n      );\n    }\n    async read(uuids = '') {\n      const state = await this.connectPeripheral();\n      if (state !== 'connected') {\n        debugCfg(\n          `[read] Peripheral:${this.uuid} is NOT ready. state=>${state}`\n        );\n        throw new Error(`Not yet connected.`);\n      }\n      uuids = uuids\n        .split(',')\n        .map((uuid) => uuid.trim())\n        .filter((uuid) => uuid);\n      const readables = this.characteristics.filter((c) => {\n        if (c.readable) {\n          if (uuids.length === 0) {\n            return true;\n          }\n          return uuids.indexOf(c.uuid) >= 0;\n        }\n      });\n      debugCfg(\n        `characteristics => ${JSON.stringify(\n          this.characteristics.map((c) => {\n            return {\n              uuid: c.uuid,\n              notifiable: c.notifiable,\n              readable: c.readable,\n              writable: c.writable,\n              writeWithoutResponse: c.writeWithoutResponse,\n            };\n          })\n        )}`\n      );\n      debugCfg(`readables.length => ${readables.length}`);\n      if (readables.length === 0) {\n        return null;\n      }\n      const notifiables = this.characteristics.filter((c) => {\n        if (c.notifiable) {\n          if (uuids.length === 0) {\n            return true;\n          }\n          return uuids.indexOf(c.uuid) >= 0;\n        }\n      });\n      // perform read here right now\n      const readObj = {};\n      // unsubscribe all notifiable characteristics\n      await Promise.all(notifiables.map((n) => n.unsubscribe()));\n      // read all readable characteristics\n      await Promise.all(\n        readables.map((r) => {\n          // {uuid:'characteristic-uuid-to-read'}\n          return new Promise((resolve, reject) => {\n            r.object.read((err, data) => {\n              if (err) {\n                debug(`<Read> ${r.uuid} => FAIL`);\n                return reject(err);\n              }\n              debugCfg(`<Read> ${r.uuid} => ${JSON.stringify(data)}`);\n              readObj[r.uuid] = data;\n              resolve();\n            });\n          });\n        })\n      );\n      return Object.keys(readObj).length > 0 ? readObj : null;\n    }\n    async subscribe(uuids = '', period = 0) {\n      const state = await this.connectPeripheral();\n      if (state !== 'connected') {\n        this.log(\n          `[subscribe] Peripheral:${this.uuid} is NOT ready. state=>${state}`\n        );\n        throw new Error(`Not yet connected.`);\n      }\n      uuids = uuids\n        .split(',')\n        .map((uuid) => uuid.trim())\n        .filter((uuid) => uuid);\n      const notifiables = this.characteristics.filter((c) => {\n        if (c.notifiable) {\n          if (uuids.length === 0) {\n            return true;\n          }\n          return uuids.indexOf(c.uuid) >= 0;\n        }\n      });\n      debugCfg(\n        `characteristics => ${JSON.stringify(\n          this.characteristics.map((c) => {\n            return {\n              uuid: c.uuid,\n              notifiable: c.notifiable,\n              readable: c.readable,\n              writable: c.writable,\n              writeWithoutResponse: c.writeWithoutResponse,\n            };\n          })\n        )}`\n      );\n      debugCfg(`notifiables.length => ${notifiables.length}`);\n      if (notifiables.length === 0) {\n        return;\n      }\n      await Promise.all(\n        notifiables.map(async (r) => {\n          r.addDataListener((data, isNotification) => {\n            if (isNotification) {\n              let readObj = {\n                notification: true,\n              };\n              readObj[r.uuid] = data;\n              this.emit('ble-notify', this.uuid, readObj);\n            }\n          });\n          r.object.subscribe((err) => {\n            if (err) {\n              this.emit('error', err);\n              this.log(`subscription error: ${err.message}`);\n            }\n          });\n          if (period > 0) {\n            setTimeout(() => {\n              r.object.unsubscribe((err) => {\n                if (err) {\n                  this.emit('error', err);\n                  this.log(`unsubscription error: ${err.message}`);\n                } else {\n                  const peripheral = noble._peripherals[this.uuid];\n                  if (peripheral) {\n                    this.emit(peripheral.state);\n                  } else {\n                    this.emit('missing');\n                  }\n                }\n              });\n            }, 5000);\n          }\n        })\n      );\n    }\n  }\n  RED.nodes.registerType('Generic BLE', GenericBLENode);\n\n  class GenericBLEInNode {\n    constructor(n) {\n      RED.nodes.createNode(this, n);\n      this.useString = n.useString;\n      this.notification = n.notification;\n      this.genericBleNodeId = n.genericBle;\n      this.genericBleNode = RED.nodes.getNode(this.genericBleNodeId);\n      if (this.genericBleNode) {\n        if (this.notification) {\n          this.genericBleNode.on('ble-notify', this.onBleNotify.bind(this));\n        }\n        this.on('connected', () => {\n          this.status({\n            fill: 'green',\n            shape: 'dot',\n            text: `generic-ble.status.connected`,\n          });\n        });\n        ['disconnected', 'error', 'missing'].forEach((ev) => {\n          this.on(ev, () => {\n            this.status({\n              fill: 'red',\n              shape: 'ring',\n              text: `generic-ble.status.${ev}`,\n            });\n          });\n        });\n        ['connecting', 'disconnecting'].forEach((ev) => {\n          this.on(ev, () => {\n            this.status({\n              fill: 'grey',\n              shape: 'ring',\n              text: `generic-ble.status.${ev}`,\n            });\n          });\n        });\n        this.genericBleNode.register(this);\n\n        this.on('input', async (msg, send) => {\n          debugIn(`input arrived! msg=>${JSON.stringify(msg)}`);\n          let obj = msg.payload || {};\n          try {\n            if (typeof obj === 'string') {\n              obj = JSON.parse(msg.payload);\n            }\n          } catch (_) {\n            // ignore\n          }\n          try {\n            if (msg.topic === 'scanStart') {\n              startBLEScanning(RED);\n              return;\n            } else if (msg.topic === 'scanStop') {\n              stopBLEScanning(RED);\n              return;\n            } else if (msg.topic === 'scanRestart') {\n              stopBLEScanning(RED);\n              setTimeout(() => {\n                startBLEScanning(RED);\n              }, 1000);\n              return;\n            } else if (msg.topic === 'connect') {\n              await this.genericBleNode.connectPeripheral();\n            } else if (msg.topic === 'disconnect') {\n              await this.genericBleNode.disconnectPeripheral();\n            } else if (obj.notify) {\n              await this.genericBleNode.subscribe(msg.topic, obj.period);\n              debugIn(`<${this.genericBleNode.uuid}> subscribe: OK`);\n            } else {\n              const readObj = await this.genericBleNode.read(msg.topic);\n              debugIn(`<${this.genericBleNode.uuid}> read: OK`);\n              if (!readObj) {\n                this.warn(\n                  `<${this.genericBleNode.uuid}> tpoic[${msg.topic}]: (no data)`\n                );\n                return;\n              }\n              let payload = {\n                uuid: this.genericBleNode.uuid,\n                characteristics: readObj,\n              };\n              if (this.useString) {\n                payload = JSON.stringify(payload);\n              }\n              const node = this;\n              send =\n                send ||\n                function () {\n                  node.send.apply(node, arguments);\n                };\n              send({\n                payload,\n              });\n            }\n          } catch (err) {\n            debugIn(\n              `<${this.genericBleNode.uuid}> tpoic[${msg.topic}]: (err:${err}, stack:${err.stack})`\n            );\n            this.error(\n              `<${this.genericBleNode.uuid}> tpoic[${msg.topic}]: (err:${err}, stack:${err.stack})`\n            );\n          }\n        });\n        this.on('close', () => {\n          if (this.genericBleNode) {\n            this.genericBleNode.remove(this);\n          }\n        });\n      }\n      this.name = n.name;\n    }\n    onBleNotify(uuid, readObj, err) {\n      if (err) {\n        this.error(`<${uuid}> notify: (err:${err}, stack:${err.stack})`);\n        return;\n      }\n      let payload = {\n        uuid: uuid,\n        characteristics: readObj,\n      };\n      if (this.useString) {\n        try {\n          payload = JSON.stringify(payload);\n        } catch (err) {\n          this.warn(`<${uuid}> notify: (err:${err}, stack:${err.stack})`);\n          return;\n        }\n      }\n      this.send({\n        payload,\n      });\n    }\n  }\n  RED.nodes.registerType('Generic BLE in', GenericBLEInNode);\n\n  class GenericBLEOutNode {\n    constructor(n) {\n      RED.nodes.createNode(this, n);\n      this.genericBleNodeId = n.genericBle;\n      this.genericBleNode = RED.nodes.getNode(this.genericBleNodeId);\n      if (this.genericBleNode) {\n        this.on('connected', () => {\n          this.status({\n            fill: 'green',\n            shape: 'dot',\n            text: `generic-ble.status.connected`,\n          });\n        });\n        ['disconnected', 'error', 'missing'].forEach((ev) => {\n          this.on(ev, () => {\n            this.status({\n              fill: 'red',\n              shape: 'ring',\n              text: `generic-ble.status.${ev}`,\n            });\n          });\n        });\n        ['connecting', 'disconnecting'].forEach((ev) => {\n          this.on(ev, () => {\n            this.status({\n              fill: 'grey',\n              shape: 'ring',\n              text: `generic-ble.status.${ev}`,\n            });\n          });\n        });\n        this.genericBleNode.register(this);\n        this.on('input', async (msg) => {\n          debugOut(`input arrived! msg=>${JSON.stringify(msg)}`);\n          try {\n            if (msg.topic === 'connect') {\n              await this.genericBleNode.connectPeripheral();\n            } else if (msg.topic === 'disconnect') {\n              await this.genericBleNode.disconnectPeripheral();\n            } else {\n              await this.genericBleNode.write(msg.payload);\n              debugOut(`<${this.genericBleNode.uuid}> write: OK`);\n            }\n          } catch (err) {\n            debugOut(`<${this.genericBleNode.uuid}> write: (err:${err})`);\n            this.error(err);\n          }\n        });\n        this.on('close', () => {\n          if (this.genericBleNode) {\n            this.genericBleNode.remove(this);\n          }\n        });\n      }\n      this.name = n.name;\n    }\n  }\n  RED.nodes.registerType('Generic BLE out', GenericBLEOutNode);\n\n  RED.events.on('runtime-event', (ev) => {\n    debugApi(`[GenericBLE] <runtime-event> ${JSON.stringify(ev)}`);\n    if (ev.id === 'runtime-state' && Object.keys(configBleDevices).length > 0) {\n      stopBLEScanning(RED);\n      startBLEScanning(RED);\n    }\n  });\n\n  // __blestate endpoint\n  RED.httpAdmin.get(\n    '/__blestate',\n    RED.auth.needsPermission('generic-ble.read'),\n    async (req, res) => {\n      debugApi(`${req.method}:${req.originalUrl}`);\n      return res.status(200).send(genericBleState).end();\n    }\n  );\n\n  // __blescan/:sw endpoint\n  RED.httpAdmin.post(\n    '/__blescan/:sw',\n    RED.auth.needsPermission('generic-ble.write'),\n    async (req, res) => {\n      debugApi(\n        `${req.method}:${req.originalUrl}, genericBleState.scanning:${genericBleState.scanning}`\n      );\n      const { sw } = req.params;\n      if (sw === 'start') {\n        startBLEScanning(RED);\n        return res\n          .status(200)\n          .send({ status: 200, message: 'startScanning' })\n          .end();\n      } else {\n        stopBLEScanning(RED);\n        return res\n          .status(200)\n          .send({ status: 200, message: 'stopScanning' })\n          .end();\n      }\n    }\n  );\n\n  // __bledevlist endpoint\n  RED.httpAdmin.get(\n    '/__bledevlist',\n    RED.auth.needsPermission('generic-ble.read'),\n    async (req, res) => {\n      debugApi(`${req.method}:${req.originalUrl}`);\n      try {\n        const body = (\n          await Promise.all(\n            Object.keys(noble._peripherals).map((uuid) => {\n              // load the live object for invoking functions\n              // as cached object is disconnected from noble context\n              const apiObject = toApiObject(noble._peripherals[uuid]);\n              if (apiObject) {\n                return apiObject;\n              }\n            })\n          )\n        ).filter((obj) => obj);\n        debugApi('/__bledevlist', JSON.stringify(body, null, 2));\n        res.json(body);\n      } catch (err) {\n        RED.log.error(\n          `/__bledevlist err:${err}\\n=>${err.stack || err.message}`\n        );\n        if (!res._headerSent) {\n          return res\n            .status(500)\n            .send({ status: 500, message: err.message || err })\n            .end();\n        }\n      }\n    }\n  );\n  // __bledev endpoint\n  RED.httpAdmin.get(\n    '/__bledev/:uuid',\n    RED.auth.needsPermission('generic-ble.read'),\n    async (req, res) => {\n      debugApi(`${req.method}:${req.originalUrl}`);\n      const { uuid } = req.params;\n      if (!uuid) {\n        return res\n          .status(404)\n          .send({ status: 404, message: 'missing peripheral' })\n          .end();\n      }\n      // load the live object for invoking functions\n      // as cached object is disconnected from noble context\n      const peripheral = noble._peripherals[uuid];\n      if (!peripheral) {\n        return res\n          .status(404)\n          .send({ status: 404, message: 'missing peripheral' })\n          .end();\n      }\n\n      try {\n        const bleDevice = await toDetailedObject(peripheral, RED);\n        debugApi(\n          `/__bledev/${uuid} OUTPUT`,\n          JSON.stringify(bleDevice, null, 2)\n        );\n        return res.json(bleDevice);\n      } catch (err) {\n        RED.log.error(\n          `/__bledev/${uuid} err:${err}\\n=>${err.stack || err.message}`\n        );\n        if (!res._headerSent) {\n          return res\n            .status(500)\n            .send({ status: 500, message: err.message || err })\n            .end();\n        }\n      }\n    }\n  );\n};\n"]}