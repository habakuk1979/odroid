"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _events=_interopRequireDefault(require("events")),_debug=_interopRequireDefault(require("debug")),_dbusNext=_interopRequireDefault(require("dbus-next"));function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}
/**
 * @license
 * Copyright (c) 2020 CANDY LINE INC.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */const debug=(0,_debug.default)("node-red-contrib-generic-ble:noble:bluez");"test"!==process.env.NODE_ENV&&(debug('Requiring "source-map-support/register"...'),require("source-map-support/register"));class BluezBindings extends _events.default{constructor(){super(),this.bus=_dbusNext.default.systemBus(),this._scanFilterDuplicates=null,this._scanning=!1,this.hciObjectPath="/org/bluez/"+(process.env.HCIDEVICE||"hci0"),this.objectStore={},debug("BluezBindings instance created!")}_addDashes(e){return e&&"string"==typeof e?(32===(e=this._to128bitUuid(e)).length&&(e=`${e.substring(0,8)}-${e.substring(8,12)}-${e.substring(12,16)}-${e.substring(16,20)}-${e.substring(20)}`),e.toLowerCase()):e}_stripDashes(e){return"string"==typeof e&&(e=e.split("-").join("").toLowerCase()),this._to16bitUuid(e)}_to128bitUuid(e){return 4===e.length&&(e=`0000${e}-0000-1000-8000-00805f9b34fb`),e}_to16bitUuid(e){return 0===e.indexOf("0000")&&8===e.indexOf("00001000800000805f9b34fb")?e.substring(4,8):e}async _startDiscovery(){try{(await this.hciProps.Get("org.bluez.Adapter1","Powered")).value||(debug("[_startDiscovery] Turning the adapter on..."),await this.hciProps.Set("org.bluez.Adapter1","Powered",new _dbusNext.default.Variant("b",!0))),debug("[_startDiscovery] Setting discovery filter..."),await this.hciAdapter.SetDiscoveryFilter({DuplicateData:new _dbusNext.default.Variant("b",!this._scanFilterDuplicates)}),debug("[_startDiscovery] Start Scanning..."),await this.hciAdapter.StartDiscovery()}catch(e){debug(`[ERROR] _startDiscovery => err.message:${e.message}, err.toString:${e.toString()}`),this._scanning||this.emit("stateChange","poweredOff")}}async startScanning(e,t){this._initialized?(this._scanFilterDuplicates=!t,this._scanning?debug("[startScanning] Scan already ongoing..."):await this._startDiscovery()):this.once("poweredOn",()=>{debug("[startScanning] Trigger startScanning again as initialization done."),this.startScanning(e,t)})}async stopScanning(){if(this._initialized){debug("[startScanning] Stop Scanning...");try{await this.hciAdapter.StopDiscovery()}catch(e){debug(`[ERROR] stopScanning => err.message:${e.message}, err.toString:${e.toString()}`)}}}async init(){if(this._initialized)debug("init: => already initialzied. Skip!");else{debug("initializing...."),this.onSigIntBinded=this.onSigInt.bind(this),process.on("SIGINT",this.onSigIntBinded),process.on("exit",this.onExit.bind(this));try{this.bluezService=await this.bus.getProxyObject("org.bluez","/"),this.bluezObjectManager=this.bluezService.getInterface("org.freedesktop.DBus.ObjectManager");const e=await this.bluezObjectManager.GetManagedObjects();if(debug("Detected Object Paths:"+Object.keys(e)),!e[this.hciObjectPath])throw debug(`Missing Bluetooth Object, Path:${this.hciObjectPath}, Valid Paths:${Object.keys(e)}}`),Error(`Missing Bluetooth Object, Path:${this.hciObjectPath}, Valid Paths:${Object.keys(e)}}`);this.hciObject=await this.bus.getProxyObject("org.bluez",this.hciObjectPath),this.hciProps=this.hciObject.getInterface("org.freedesktop.DBus.Properties"),this.hciAdapter=this.hciObject.getInterface("org.bluez.Adapter1"),this._scanning=(await this.hciProps.Get("org.bluez.Adapter1","Discovering")).value,this._scanning&&this.onScanStarted(),this.bluezObjectManager.on("InterfacesAdded",this.onDevicesServicesCharacteristicsDiscovered.bind(this)),this.bluezObjectManager.on("InterfacesRemoved",this.onDevicesServicesCharacteristicsMissed.bind(this)),this.hciProps.on("PropertiesChanged",this.onAdapterPropertiesChanged.bind(this)),this._initialized=!0,debug("async init() => done"),this.emit("stateChange","poweredOn")}catch(e){debug(`async init() => error { message:${e.message}, type: ${e.type} }`),this.emit("stateChange","error"),this.emit("error",e)}}}_option(e,t,i=null){return e[t]?e[t].value:i}_toUuid(e){return e.split("/")[4].substring(4).replace(/_/g,"").toLowerCase()}_toObjectPath(e){const t=e.toUpperCase();return`/org/bluez/hci0/dev_${t[0]}${t[1]}_${t[2]}${t[3]}_${t[4]}${t[5]}_${t[6]}${t[7]}_${t[8]}${t[9]}_${t[10]}${t[11]}`}async _getProxyObject(e){return this.bus.getProxyObject("org.bluez",e)}async _getDeviceInterface(e){return(await this._getProxyObject(e)).getInterface("org.bluez.Device1")}async _getPropertiesInterface(e){return(await this._getProxyObject(e)).getInterface("org.freedesktop.DBus.Properties")}async _getCharacteristicInterface(e){return(await this._getProxyObject(e)).getInterface("org.bluez.GattCharacteristic1")}async connect(e){debug("connect:deviceUuid=>"+e);const t=this._toObjectPath(e),i=await this._getDeviceInterface(t);try{await i.Connect()}catch(i){debug(`[ERROR] connect:deviceUuid=>${e} => err.message:${i.message}, err.toString:${i.toString()}`),this.emit("connect",e,i);try{await this.hciAdapter.RemoveDevice(t)}catch(t){debug(`[${e}]<connect> Error while removing the device: ${t.message}, ${t.type}`)}}}async disconnect(e){debug("disconnect:deviceUuid=>"+e);const t=this._toObjectPath(e),i=await this._getDeviceInterface(t);try{await i.Disconnect()}catch(t){debug(`[ERROR] disconnect:deviceUuid=>${e} => err.message:${t.message}, err.toString:${t.toString()}`),this.emit("disconnect",e)}}async discoverServices(e,t){debug(`discoverServices:deviceUuid=>${e},uuids=>${t}`);const i=this._toObjectPath(e),s=await this._getPropertiesInterface(i),a=(await s.Get("org.bluez.Device1","ServicesResolved")).value;a&&(debug(`discoverServices:deviceUuid=>${e}, servicesResolved=>${a}`),this.onServicesResolved(e,s))}async _listCharacteristics(e,t,i){debug(`[${e}] Collecting characteristsics for the service ${t}`);const s=(i||[]).map(this._addDashes.bind(this)),a=this._toObjectPath(e)+"/service",r=await this.bluezObjectManager.GetManagedObjects(),c=Object.keys(r).filter(e=>0===e.indexOf(a));if(0===c.length)return null;const n=c.filter(e=>{const i=r[e];return i["org.bluez.GattService1"]&&i["org.bluez.GattService1"].UUID.value===t})[0];if(!n)return null;const o=n+"/char",d={};return c.filter(e=>0===e.indexOf(o)).forEach(e=>{const t=r[e]["org.bluez.GattCharacteristic1"];t&&(s.length>0&&!s.includes(t.UUID.value)||(d[e]=t))}),d}async discoverCharacteristics(e,t,i){debug(`discoverCharacteristics:deviceUuid=>${e},serviceUuid=>${t},characteristicUuids=>${i}`);const s=await this._listCharacteristics(e,t,i),a=Object.values(s||{}).map(e=>({uuid:this._stripDashes(e.UUID.value),properties:e.Flags.value}));debug("resultChrs => "+JSON.stringify(a));try{this.emit("characteristicsDiscover",e,t,a),debug(`[${e}] OK. Found ${a.length} Characteristics. characteristicsDiscover event`)}catch(e){debug("Failed to emit 'characteristicsDiscover' event. message:"+e.message)}}async read(e,t,i){const s=this._addDashes(i);debug(`read:deviceUuid=>${e},serviceUuid=>${t},dashedCharacteristicUuid=>${s}`);const a=await this._listCharacteristics(e,t,[s]);let r=null;const c=Object.keys(a)[0];if(c){const e=await this._getCharacteristicInterface(c);r=Buffer.from(await e.ReadValue({}))}debug(`read:characteristicObjectPath=>${c}, data=>${JSON.stringify(r)}`),this.emit("read",e,t,i,r,!1)}async write(e,t,i,s,a){const r=this._addDashes(i);debug(`write:deviceUuid=>${e},serviceUuid=>${t},dashedCharacteristicUuid=>${r},data=>${s},withoutResponse=>${a}`);const c=await this._listCharacteristics(e,t,[r]),n=Object.keys(c)[0];if(n){const e=await this._getCharacteristicInterface(n);s=s.toJSON().data;const t=a?"command":"request";await e.WriteValue(s,{type:new _dbusNext.default.Variant("s",t)})}debug(`write:characteristicObjectPath=>${n}, data=>${JSON.stringify(s)}, withoutResponse=>${a}`),this.emit("write",e,t,i,s,a)}async notify(e,t,i,s){const a=this._addDashes(i);debug(`notify:deviceUuid=>${e},serviceUuid=>${t},dashedCharacteristicUuid=>${a},subscribe?=>${s}`);const r=await this._listCharacteristics(e,t,[a]),c=Object.keys(r)[0];if(c){const a=await this._getCharacteristicInterface(c),r=await this._getPropertiesInterface(c);this.objectStore[c]||(this.objectStore[c]={});const n=this.objectStore[c]||{};this.objectStore[c]=n,n.notificationHandeler||(debug("Setting objectStore.notificationHandeler"),n.notificationHandeler=async(s,a,r)=>{debug(`[${c}]<PropertiesChanged> interfaceName:${s}, changedProps:${Object.keys(a)}, invalidatedProps:${JSON.stringify(r)}`),"org.bluez.GattCharacteristic1"===s&&(a.Value&&this.emit("read",e,t,i,Buffer.from(a.Value.value),n.notifying),debug(`[${c}]<PropertiesChanged> GattCharacteristic1 changedProps=>${JSON.stringify(a)}`))},r.on("PropertiesChanged",n.notificationHandeler));const o=(await r.Get("org.bluez.GattCharacteristic1","Notifying")).value;debug(`${e}, subscribing(${i})? => ${o}`),s?(await a.StartNotify(),n.notifying=!0,debug(`${e}, START subscribing(${i}) Notify events`)):(await a.StopNotify(),n.notifying=!1,debug(`${e}, STOP subscribing(${i}) Notify events`)),this.emit("notify",e,t,i,s)}debug(`notify:characteristicObjectPath=>${c}, subscribe?=>${s}`),this.emit("notify",e,t,i,s)}async onDevicesServicesCharacteristicsDiscovered(e,t){const i=Object.keys(t);if(i.includes("org.bluez.Device1")){const i=t["org.bluez.Device1"];this.onDeviceDiscovered(e,i)}else debug(`<onDevicesServicesCharacteristicsDiscovered> objectPath:${e}, interfaces:${JSON.stringify(i)}`)}async onDeviceDiscovered(e,t){debug(`<onDeviceDiscovered> objectPath:${e}, alias:${t.Alias.value||"n/a"}, device: ${JSON.stringify(t)}`);const i=this._toUuid(e),s=await this._getPropertiesInterface(e);s.on("PropertiesChanged",async(t,a,r)=>{if(debug(`[${i}]<PropertiesChanged> interfaceName:${t}, changedProps:${Object.keys(a)}, invalidatedProps:${JSON.stringify(r)}`),"org.bluez.Device1"===t&&(a.Connected&&(a.Connected.value?this.emit("connect",i):this.emit("disconnect",i)),a.ServicesResolved&&a.ServicesResolved.value&&this.onServicesResolved(i,s),a.RSSI&&this.emit("rssiUpdate",i,a.RSSI.value),r.includes("RSSI"))){debug(`[${i}]<PropertiesChanged> RSSI is invalidated. Removing the device.`);try{await this.hciAdapter.RemoveDevice(e)}catch(e){"org.bluez.Error.DoesNotExist"!==e.type&&debug(`[${i}]<PropertiesChanged> Error while removing the device: ${e.message}, ${e.type}`)}}});const a=this._option(t,"RSSI"),r=(t.Address.value||"").toLowerCase(),c=t.AddressType.value,n=!t.Blocked.value,o=t.ManufacturerData?Object.values(t.ManufacturerData.value)[0].value:null;o&&o.unshift(Object.keys(t.ManufacturerData.value)[0]);const d=t.ServiceData?Object.keys(t.ServiceData.value).map(e=>({uuid:e,data:Buffer.from(t.ServiceData.value[e].value)})):null,u={localName:this._option(t,"Alias"),txPowerLevel:this._option(t,"TxPower"),serviceUuids:this._option(t,"UUIDs",[]),manufacturerData:o?Buffer.from(o):null,serviceData:d};this.emit("discover",i,r,c,n,u,a)}async onServicesResolved(e,t){const i=(await t.Get("org.bluez.Device1","UUIDs")).value;this.emit("servicesDiscover",e,i)}async onDevicesServicesCharacteristicsMissed(e,t){if(debug(`<InterfacesRemoved:DevicesMissed> objectPath:${e}, interfaces:${JSON.stringify(t)}`),delete this.objectStore[e],t.includes("org.bluez.Device1")){const t=this._toUuid(e);this.onDeviceMissed(t)}}async onDeviceMissed(e){debug("<onDeviceMissed> peripheralUuid:"+e),this.emit("miss",e)}async onAdapterPropertiesChanged(e,t,i){debug(`<Adapter:PropertiesChanged> interfaceName:${e}, changedProps:${Object.keys(t)}, invalidatedProps:${JSON.stringify(i)}`),"org.bluez.Adapter1"===e&&(t.Discovering&&(debug("Discovering=>"+t.Discovering.value),t.Discovering.value?this.onScanStarted():this.onScanStopepd()),t.Powered&&(debug("Powered=>"+t.Powered.value),t.Powered.value||(this._scanning=!1,setTimeout(async()=>{try{await this._startDiscovery()}catch(e){debug(`Error while turning on the adapter. err.message:${e.message}, type:${e.type}`)}},5e3))))}async onScanStarted(){debug("<onScanStarted> fired"),this._scanning=!0;const e=await this.bluezObjectManager.GetManagedObjects(),t=this.hciObjectPath+"/dev_";let i=0;Object.keys(e).filter(e=>0===e.indexOf(t)&&37===e.length).forEach(t=>{debug(`<onScanStarted> ${i++}:${t} Device Found`);const s=e[t];this.onDevicesServicesCharacteristicsDiscovered(t,s)}),this.emit("scanStart",this._scanFilterDuplicates)}onScanStopepd(){debug("[onScanStopepd] fired"),this._scanning=!1,this.emit("scanStop")}onSigInt(){const e=process.listeners("SIGINT");e[e.length-1]===this.onSigIntBinded&&process.exit(1)}onExit(){this.stopScanning()}get bluez(){return!0}}var _default=new BluezBindings;exports.default=_default;
//# sourceMappingURL=bindings.js.map
