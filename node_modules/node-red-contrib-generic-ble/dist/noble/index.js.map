{"version":3,"sources":["noble/index.js"],"names":["_noble","_interopRequireDefault","require","_os","debug","default","platform","os","bindings","PeripheralRemovableNoble","Noble","constructor","super","on","this","onMiss","bind","onError","uuid","initialized","_peripherals","peripheral","state","once","disconnect","_services","_characteristics","_descriptors","previouslyDiscoverdIndex","_discoveredPeripheralUUids","indexOf","splice","emit","err","type","module","exports"],"mappings":"aAiBA,IAAAA,OAAAC,uBAAAC,QAAA,iCACAC,IAAAF,uBAAAC,QAAA;;;;;;;;;;;;;;;;GAGA,MAAME,OAAQ,EAFdH,uBAAAC,QAAA,UAEcG,SAAY,sCAEpBC,SAAWC,IAAAA,QAAGD,WAGpB,IAAIE,SAFJJ,MAAO,yBAAwBE,aAGd,UAAbA,WACFE,SAAWN,QAAQ,wBAAwBG,SAExCG,WACHJ,MAAO,sEACPI,SAAWN,QAAQ,0CAARA,IAGb,MAAMO,iCAAiCC,OAAAA,QACrCC,YAAYH,GACVI,MAAMJ,GACNA,EAASK,GAAG,OAAQC,KAAKC,OAAOC,KAAKF,OACrCN,EAASK,GAAG,QAASC,KAAKG,QAAQD,KAAKF,OAEzCC,OAAOG,GAEL,GADAd,MAAO,WAAUc,0BAA6BJ,KAAKK,eAC/CL,KAAKM,aAAaF,GAAO,CAC3B,MAAMG,EAAaP,KAAKM,aAAaF,GAErC,GADAd,MAAO,WAAUc,0BAA6BG,EAAWC,SAChC,cAArBD,EAAWC,MAQb,OAPAD,EAAWE,KAAK,aAAc,KAC5BnB,MACG,WAAUc,qDAEbJ,KAAKC,OAAOG,UAEdG,EAAWG,oBAGNV,KAAKM,aAAaF,UAClBJ,KAAKW,UAAUP,UACfJ,KAAKY,iBAAiBR,UACtBJ,KAAKa,aAAaT,GACzB,MAAMU,EAA2Bd,KAAKe,2BAA2BC,QAC/DZ,GAEEU,GAA4B,GAC9Bd,KAAKe,2BAA2BE,OAAOH,EAA0B,GAEnExB,MAAO,mBAAkBc,gBACzBJ,KAAKkB,KAAK,OAAQX,IAGtBJ,QAAQgB,GACW,4CAAbA,EAAIC,OACNpB,KAAKK,aAAc,GAErBL,KAAKkB,KAAK,QAASC,IAIvBE,OAAOC,QAAU,IAAI3B,yBAAyBD","file":"index.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2020 CANDY LINE INC.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Noble from '@abandonware/noble/lib/noble';\nimport os from 'os';\nimport debugLogger from 'debug';\n\nconst debug = debugLogger('node-red-contrib-generic-ble:noble');\n\nconst platform = os.platform();\ndebug(`Detected Platform => [${platform}]`);\n\nlet bindings;\nif (platform === 'linux') {\n  bindings = require('./lib/bluez/bindings').default;\n}\nif (!bindings) {\n  debug(`Loading the default resolve-bindings module in @abandonware/noble.`);\n  bindings = require('@abandonware/noble/lib/resolve-bindings')();\n}\n\nclass PeripheralRemovableNoble extends Noble {\n  constructor(bindings) {\n    super(bindings);\n    bindings.on('miss', this.onMiss.bind(this));\n    bindings.on('error', this.onError.bind(this));\n  }\n  onMiss(uuid) {\n    debug(`<onMiss:${uuid}> this.initialized => ${this.initialized}`);\n    if (this._peripherals[uuid]) {\n      const peripheral = this._peripherals[uuid];\n      debug(`<onMiss:${uuid}> peripheral.state => ${peripheral.state}`);\n      if (peripheral.state === 'connected') {\n        peripheral.once('disconnect', () => {\n          debug(\n            `<onMiss:${uuid}:peripheral:disconnect> peripheral disconnected.`\n          );\n          this.onMiss(uuid);\n        });\n        peripheral.disconnect();\n        return;\n      }\n      delete this._peripherals[uuid];\n      delete this._services[uuid];\n      delete this._characteristics[uuid];\n      delete this._descriptors[uuid];\n      const previouslyDiscoverdIndex = this._discoveredPeripheralUUids.indexOf(\n        uuid\n      );\n      if (previouslyDiscoverdIndex >= 0) {\n        this._discoveredPeripheralUUids.splice(previouslyDiscoverdIndex, 1);\n      }\n      debug(`Peripheral(uuid:${uuid}) has gone.`);\n      this.emit('miss', peripheral);\n    }\n  }\n  onError(err) {\n    if (err.type === 'org.freedesktop.DBus.Error.AccessDenied') {\n      this.initialized = false;\n    }\n    this.emit('error', err);\n  }\n}\n\nmodule.exports = new PeripheralRemovableNoble(bindings);\n"]}